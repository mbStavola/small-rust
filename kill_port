#!/usr/bin/env -S cargo eval --

// cargo-deps: argh = "0.1"

use std::process::{self, Command};

use argh::FromArgs;

#[derive(FromArgs)]
#[argh(description = "Simple program to kill a process listening on a specific port.")]
struct App {
    #[argh(switch, description = "check udp protocol ports.")]
    udp: bool,

    #[argh(
        option,
        description = "which signal to send to the process. defaults to kill.",
        default = "String::from(\"9\")"
    )]
    signal: String,

    #[argh(positional, description = "what port to free.")]
    port: u16,
}

fn main() {
    let app: App = argh::from_env();

    let address = format!("{}:{}", if app.udp { "udp" } else { "tcp" }, app.port);
    let output = Command::new("lsof")
        .arg("-t")
        .arg("-i")
        .arg(address)
        .output()
        .expect("failed to execute lsof");

    if !output.status.success() && !output.stderr.is_empty() {
        let error = String::from_utf8(output.stderr).expect("must be valid utf8");
        eprintln!("Failed to lsof port '{}'. Reason:\n{}", app.port, error);
        process::exit(1);
    }

    let pids = String::from_utf8(output.stdout).expect("must be valid utf8");
    let pids = pids.split_ascii_whitespace().collect::<Vec<_>>();

    if pids.is_empty() {
        println!("Port '{}' is not bound to any process", app.port);
        return;
    }

    println!("Found {} process(es) bound to '{}'", pids.len(), app.port);

    for pid in pids {
        println!("Killing process {}", pid);

        let output = Command::new("kill")
            .arg("-s")
            .arg(&app.signal)
            .arg(pid)
            .output()
            .expect("failed to execute kill");

        if !output.status.success() {
            let error = String::from_utf8(output.stderr).expect("must be valid utf8");
            eprintln!("Failed to kill process '{}'. Reason:\n{}", pid, error);
            process::exit(1);
        }
    }
}
