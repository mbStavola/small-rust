#!/usr/bin/env -S cargo eval --

// cargo-deps: argh = "0.1"

use argh::FromArgs;

use std::fmt;
use std::str::FromStr;

const DELTA: &str = "Δ";
const FILLED_TRIANGLE: &str = "▲";
const HOLLOW_TRIANGLE: &str = "△";
const DOT: &str = ".";
const CARAT: &str = "^";

#[derive(Copy, Clone)]
enum TriangleType {
    Delta,
    Filled,
    Hollow,
    Dot,
    Carat,
}

impl fmt::Display for TriangleType {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let displayable = match self {
            TriangleType::Delta => DELTA,
            TriangleType::Filled => FILLED_TRIANGLE,
            TriangleType::Hollow => HOLLOW_TRIANGLE,
            TriangleType::Dot => DOT,
            TriangleType::Carat => CARAT,
        };

        write!(f, "{}", displayable)
    }
}

impl FromStr for TriangleType {
    type Err = String;

    fn from_str(value: &str) -> Result<TriangleType, String> {
        let triangle =
            match value.to_lowercase().as_str() {
                "delta" => TriangleType::Delta,
                "filled" => TriangleType::Filled,
                "hollow" => TriangleType::Hollow,
                "dot" => TriangleType::Dot,
                "carat" => TriangleType::Carat,
                _ => return Err(
                    "unrecognized triangle type. try one of: delta, filled, hollow, dot, or carat."
                        .to_string(),
                ),
            };

        Ok(triangle)
    }
}

#[derive(FromArgs)]
#[argh(description = "Prints a Sierpinski triangle.")]
struct App {
    #[argh(
        option,
        description = "triangle type to use.",
        default = "TriangleType::Filled"
    )]
    triangle: TriangleType,

    #[argh(positional, description = "size of the Sierpinski triangle.")]
    size: Option<u8>,
}

fn main() {
    let App { size, triangle } = argh::from_env();
    let size = size.unwrap_or(1);

    let height = 2_usize.pow(size as u32);
    let width = (2 * height) - 1;

    let mut bounding_box = vec![vec![0_u16; width]; height];
    bounding_box[0][height - 1] = 1;

    let mut last_row = bounding_box[0].clone();
    for (i, row) in bounding_box.iter_mut().skip(1).enumerate() {
        for (j, cell) in row.iter_mut().enumerate() {
            let top_left = last_row.get(j - 1).unwrap_or(&0);
            let top_right = last_row.get(j + 1).unwrap_or(&0);

            *cell = top_left + top_right;
        }
        last_row = row.clone();
    }

    for row in bounding_box {
        for cell in row {
            if cell == 0 || cell % 2 == 0 {
                print!(" ");
            } else {
                print!("{}", triangle);
            }
        }
        println!();
    }
}
